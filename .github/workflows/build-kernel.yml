name: 构建内核
on:
  schedule:
    - cron:  '0 4 * * *'
  workflow_dispatch:

jobs:
  build:
    name: 构建内核
    runs-on: ubuntu-latest
    env:
      CCACHE_COMPILERCHECK: "%compiler% -dumpmachine; %compiler% -dumpversion"
      CCACHE_NOHASHDIR: "true"
      CCACHE_HARDLINK: "true"
    steps:
      - uses: actions/checkout@v3
      - name: 构建编译内核环境
        run: |
          echo "BUILD_TIME=$(TZ=Asia/Kuala_Lumpur date "+%Y %m %d %H,%M")" >> $GITHUB_ENV
          sudo apt-get update
          sudo apt-get install git ccache automake flex lzop bison gperf build-essential zip curl zlib1g-dev g++-multilib libxml2-utils bzip2 libbz2-dev libbz2-1.0 libghc-bzlib-dev squashfs-tools pngcrush schedtool dpkg-dev liblz4-tool make optipng maven libssl-dev pwgen libswitch-perl policycoreutils minicom libxml-sax-base-perl libxml-simple-perl bc libc6-dev-i386 lib32ncurses5-dev libx11-dev lib32z-dev libgl1-mesa-dev xsltproc unzip device-tree-compiler python2 python3
          mkdir -p $GITHUB_WORKSPACE/kernel_workspace

      - name: 下载Proton-Clang编译器
        run: |
          cd $GITHUB_WORKSPACE/kernel_workspace
          git clone https://github.com/kdrag0n/proton-clang clang --depth=1

      - name: 下载内核源码
        run: |
          cd $GITHUB_WORKSPACE/kernel_workspace
          git clone https://github.com/ziesnp57/kernel_realme_sm8250 -b bigshot android-kernel --depth=1

      - name: 开启KVM配置
        run: |
          cd $GITHUB_WORKSPACE/kernel_workspace/android-kernel
          scripts/config --file arch/arm64/configs/vendor/sm8250_defconfig --enable CONFIG_VIRTUALIZATION
          scripts/config --file arch/arm64/configs/vendor/sm8250_defconfig --enable CONFIG_KVM
          scripts/config --file arch/arm64/configs/vendor/sm8250_defconfig --enable CONFIG_VHOST_NET
          scripts/config --file arch/arm64/configs/vendor/sm8250_defconfig --enable CONFIG_VHOST_CROSS_ENDIAN_LEGACY

      - name: 开启lxc和docker配置
        run: |
          cd $GITHUB_WORKSPACE/kernel_workspace/android-kernel
          bash $GITHUB_WORKSPACE/scripts/check-kernel-config/LXC-DOCKER-OPEN-CONFIG.sh arch/arm64/configs/vendor/sm8250_defconfig -w

      - name: 打入 LXC 补丁
        run: |
          cd $GITHUB_WORKSPACE/kernel_workspace/android-kernel
          export LXC_PATCHES=$GITHUB_WORKSPACE/patches/lxc-docker
          bash $GITHUB_WORKSPACE/scripts/patch/lxc-docker.sh

      - name: 打入Android-Container补丁
        run: |
          cd $GITHUB_WORKSPACE/kernel_workspace/android-kernel
          rm -rf utils
          git clone https://github.com/tomxi1997/lxc-docker-support-for-android.git utils
          sed -i '/CONFIG_ANDROID_PARANOID_NETWORK/d' arch/arm64/configs/vendor/sm8250_defconfig
          echo "# CONFIG_ANDROID_PARANOID_NETWORK is not set" >> arch/arm64/configs/vendor/sm8250_defconfig

          #sed -i '/CONFIG_LOCALVERSION/d' arch/arm64/configs/vendor/sm8250_defconfig
          #echo 'CONFIG_LOCALVERSION="-LXC-KernelSU"' >> arch/arm64/configs/vendor/sm8250_defconfig

          chmod +x $GITHUB_WORKSPACE/kernel_workspace/android-kernel/utils/runcpatch.sh
          if [ -f $GITHUB_WORKSPACE/kernel_workspace/android-kernel/kernel/cgroup/cgroup.c ]; then
            sh $GITHUB_WORKSPACE/kernel_workspace/android-kernel/utils/runcpatch.sh $GITHUB_WORKSPACE/kernel_workspace/android-kernel/kernel/cgroup/cgroup.c
          fi

#          if [ -f $GITHUB_WORKSPACE/kernel_workspace/android-kernel/net/netfilter/xt_qtaguid.c ]; then
#            patch -p0 < $GITHUB_WORKSPACE/kernel_workspace/android-kernel/utils/xt_qtaguid.patch
#          fi

      - name: 关闭 Android 网络配置
        run: |
          cd $GITHUB_WORKSPACE/kernel_workspace/android-kernel
          scripts/config --file arch/arm64/configs/vendor/sm8250_defconfig --disable ANDROID_PARANOID_NETWORK

      - name: 启用 Kali-Nethunter
        run: |
          cd $GITHUB_WORKSPACE/kernel_workspace/android-kernel
          bash $GITHUB_WORKSPACE/scripts/patch/kali-nethunter-kernel.sh
          bash $GITHUB_WORKSPACE/scripts/check-kernel-config/Kali-defconfig-checker.sh arch/arm64/configs/vendor/sm8250_defconfig -w

      - name: 启用 KernelSU
        run: |
          cd $GITHUB_WORKSPACE/kernel_workspace/android-kernel
          curl -LSs "https://raw.githubusercontent.com/tiann/KernelSU/main/kernel/setup.sh" | bash -s v0.9.5

      - name: 开启KSU补充内核配置
        run: |
           cd $GITHUB_WORKSPACE/kernel_workspace/android-kernel
           scripts/config --file arch/arm64/configs/vendor/sm8250_defconfig --enable CONFIG_NF_NAT_IPV6
           scripts/config --file arch/arm64/configs/vendor/sm8250_defconfig --enable CONFIG_IP6_NF_TARGET_MASQUERADE
           scripts/config --file arch/arm64/configs/vendor/sm8250_defconfig --enable CONFIG_NETFILTER_XT_TARGET_CHECKSUM
           scripts/config --file arch/arm64/configs/vendor/sm8250_defconfig --enable CONFIG_FHANDLE
           scripts/config --file arch/arm64/configs/vendor/sm8250_defconfig --enable CONFIG_UNIX_DIAG
           scripts/config --file arch/arm64/configs/vendor/sm8250_defconfig --enable CONFIG_PACKET_DIAG
           scripts/config --file arch/arm64/configs/vendor/sm8250_defconfig --enable CONFIG_NETLINK_DIAG


           scripts/config --file arch/arm64/configs/vendor/sm8250_defconfig --enable CONFIG_KPROBES
           scripts/config --file arch/arm64/configs/vendor/sm8250_defconfig --enable CONFIG_HAVE_KPROBES
           scripts/config --file arch/arm64/configs/vendor/sm8250_defconfig --enable CONFIG_KPROBE_EVENTS


           scripts/config --file arch/arm64/configs/vendor/sm8250_defconfig --enable CONFIG_OVERLAY_FS


           scripts/config --file arch/arm64/configs/vendor/sm8250_defconfig --disable CONFIG_LTO
           scripts/config --file arch/arm64/configs/vendor/sm8250_defconfig --disable CONFIG_LTO_CLANG
           scripts/config --file arch/arm64/configs/vendor/sm8250_defconfig --disable CONFIG_THINLTO
           scripts/config --file arch/arm64/configs/vendor/sm8250_defconfig --enable  CONFIG_LTO_NONE
           
           scripts/config --file arch/arm64/configs/vendor/sm8250_defconfig --disable CONFIG_CC_WERROR


      - name: 设置缓存
        uses: hendrikmuhs/ccache-action@v1.2
        with:
          key: build-kernel-${{ env.UPLOADNAME }}
          max-size: 6G

      - name: 构建内核
        run: |
          cd $GITHUB_WORKSPACE/kernel_workspace/android-kernel
          export PATH=$GITHUB_WORKSPACE/kernel_workspace/clang/bin:$PATH
          make -j$(nproc --all) CROSS_COMPILE=aarch64-linux-gnu- CC=clang O=out ARCH=arm64 vendor/sm8250_defconfig
          make -j$(nproc --all) CROSS_COMPILE=aarch64-linux-gnu- CC="ccache clang" O=out ARCH=arm64

      - name: 制作Anykernel3卡刷包
        run: |
          cd $GITHUB_WORKSPACE/kernel_workspace
          git clone https://github.com/osm0sis/AnyKernel3
          sed -i 's/do.devicecheck=1/do.devicecheck=0/g' AnyKernel3/anykernel.sh
          sed -i 's!block=/dev/block/platform/omap/omap_hsmmc.0/by-name/boot;!block=auto;!g' AnyKernel3/anykernel.sh
          sed -i 's/is_slot_device=0;/is_slot_device=auto;/g' AnyKernel3/anykernel.sh
          cp android-kernel/out/arch/arm64/boot/Image AnyKernel3/
          rm -rf AnyKernel3/.git* AnyKernel3/README.md

      - name: 上传AnyKernel3
        uses: actions/upload-artifact@v3
        with:
          name: AnyKernel3-bigshot-KernelSU-${{ env.BUILD_TIME }}
          path: kernel_workspace/AnyKernel3/*
